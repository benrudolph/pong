// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Ball = (function() {

    function Ball(gameWidth, gameHeight, bricks, paddle) {
      this.move = __bind(this.move, this);

      this.detectCollision = __bind(this.detectCollision, this);

      this.draw = __bind(this.draw, this);
      this.gameWidth = gameWidth;
      this.gameHeight = gameHeight;
      this.ballRadius = (1 / 50) * gameWidth;
      this.x = gameWidth / 2;
      this.y = gameHeight / 2;
      this.x_velocity = 2;
      this.y_velocity = 2;
      this.bricks = bricks;
      this.paddle = paddle;
    }

    Ball.prototype.draw = function(context) {
      context.strokeStyle = "#000000";
      context.fillStyle = "#FFFF00";
      context.beginPath();
      context.arc(this.x, this.y, this.ballRadius, 0, Math.PI * 2, true);
      context.closePath();
      context.fill();
      context.stroke();
      return this.move();
    };

    Ball.prototype.detectCollision = function(collidables) {
      var collidable, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = collidables.length; _i < _len; _i++) {
        collidable = collidables[_i];
        if (collidable.collided(this.x, this.y, 2 * this.ballRadius, 2 * this.ballRadius)) {
          _results.push(collidable.collisionEffect(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Ball.prototype.move = function() {
      this.x += this.x_velocity;
      if (this.x > this.gameWidth || this.x < 0) {
        this.x_velocity = -this.x_velocity;
      }
      this.y += this.y_velocity;
      if (this.y > this.gameHeight || this.y < 0) {
        return this.y_velocity = -this.y_velocity;
      }
    };

    return Ball;

  })();

}).call(this);
